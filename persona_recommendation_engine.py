#!/usr/bin/env python3
"""
Persona-based Recommendation Engine
ÌéòÎ•¥ÏÜåÎÇò Í∏∞Î∞ò ÎßûÏ∂§ Ï∂îÏ≤ú ÏãúÏä§ÌÖú
"""

import json
from datetime import datetime
from dataclasses import dataclass
from typing import List, Dict, Any
from dotenv import load_dotenv

@dataclass
class PersonaProfile:
    """ÌéòÎ•¥ÏÜåÎÇò ÌîÑÎ°úÌïÑ Ï†ïÏùò"""
    name: str
    age_group: str
    income_level: str
    interests: List[Dict[str, Any]]  # ÏÉàÎ°úÏö¥ Íµ¨Ï°∞: [{"keyword": "workwear", "related": ["blazer", "tote bag"]}]
    shopping_behavior: Dict[str, Any]
    social_platforms: List[str]
    preferred_content: List[str]
    budget_range: tuple
    lifestyle: List[str]

@dataclass
class ProductRecommendation:
    """Ï†úÌíà Ï∂îÏ≤ú"""
    product_name: str
    category: str
    price_range: str
    why_recommended: str
    where_to_buy: List[str]
    content_angle: str
    trending_score: int

@dataclass
class ContentIdea:
    """ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥"""
    title: str
    content_type: str
    platform: str
    hook: str
    key_points: List[str]
    call_to_action: str
    trend_connection: str

class PersonaRecommendationEngine:
    """ÌéòÎ•¥ÏÜåÎÇò ÎßûÏ∂§ Ï∂îÏ≤ú ÏóîÏßÑ"""
    
    def __init__(self, debug_mode: bool = False):
        self.debug_mode = debug_mode
        self.personas = self._define_personas()
        self.trend_data = self._get_current_trends()
        self.debug_log = []  # Store debug information
        
        if self.debug_mode:
            self._debug_print("üéØ PersonaRecommendationEngine initialized in debug mode")
            self._debug_print(f"üìä Loaded {len(self.personas)} personas")
            self._debug_print(f"üìà Loaded {len(self.trend_data)} trend data points")
    
    def _define_personas(self) -> Dict[str, PersonaProfile]:
        """ÌÉÄÍ≤ü ÌéòÎ•¥ÏÜåÎÇò Ï†ïÏùò"""
        return {
            "young_filipina_beauty": PersonaProfile(
                name="ÎßàÎ¶¨ÏïÑ (Young Filipina Beauty Enthusiast)",
                age_group="18-25",
                income_level="Lower-Middle",
                interests=[
                    {"keyword": "K-beauty", "related": ["korean skincare", "k-skincare", "korean makeup", "korean cosmetics", "korean brand"]},
                    {"keyword": "skincare", "related": ["serum", "moisturizer", "cleanser", "toner", "sunscreen", "face mask", "retinol", "vitamin c"]},
                    {"keyword": "makeup tutorials", "related": ["makeup", "tutorial", "cosmetics", "lip tint", "foundation", "concealer", "eyeshadow", "blush"]},
                    {"keyword": "affordable beauty", "related": ["budget", "cheap", "affordable", "drugstore", "dupe", "budget-friendly"]}
                ],
                shopping_behavior={
                    "price_sensitive": True,
                    "influenced_by_reviews": True,
                    "shops_online": True,
                    "follows_influencers": True
                },
                social_platforms=["TikTok", "Instagram", "Shopee Live"],
                preferred_content=["tutorials", "reviews", "before_after", "dupes"],
                budget_range=(200, 1500),  # PHP
                lifestyle=["student", "working_class", "social_media_active"]
            ),
            
            "young_professional_fashionista": PersonaProfile(
                name="ÏïàÎÇò (Young Professional Fashionista)",
                age_group="25-32",
                income_level="Middle",
                interests=[
                    {"keyword": "sustainable fashion", "related": ["eco-friendly", "recycled", "organic cotton", "upcycled", "ethical fashion", "green fashion", "sustainable"]},
                    {"keyword": "workwear", "related": ["blazer", "tote bag", "slacks", "office look", "shirt", "blouse", "work outfit", "professional", "business casual", "office wear"]},
                    {"keyword": "Korean fashion", "related": ["k-fashion", "hongdae style", "wide pants", "seoul fashion", "korean style", "korean brand"]},
                    {"keyword": "accessories", "related": ["bag", "handbag", "jewelry", "watch", "scarf", "belt", "purse", "wallet", "tote", "crossbody"]}
                ],
                shopping_behavior={
                    "quality_focused": True,
                    "brand_conscious": True,
                    "shops_online_offline": True,
                    "values_sustainability": True
                },
                social_platforms=["Instagram", "Pinterest", "Lazada"],
                preferred_content=["styling_tips", "outfit_ideas", "brand_stories", "sustainability"],
                budget_range=(1000, 5000),  # PHP
                lifestyle=["working_professional", "environmentally_conscious", "trendy"]
            ),
            
            "kpop_enthusiast": PersonaProfile(
                name="Ï†úÏãúÏπ¥ (K-pop & Korean Culture Fan)",
                age_group="16-28",
                income_level="Lower-Middle",
                interests=[
                    {"keyword": "K-pop", "related": ["idol", "korean music", "k-music", "korean idol", "boy group", "girl group", "kpop", "korean pop"]},
                    {"keyword": "Korean skincare", "related": ["k-beauty", "korean cosmetics", "korean makeup", "korean brand", "skincare", "k-skincare"]},
                    {"keyword": "K-drama", "related": ["korean drama", "kdrama", "korean series", "korean actor", "korean actress", "korean show"]},
                    {"keyword": "Korean food", "related": ["korean cuisine", "k-food", "korean restaurant", "korean snack", "kimchi", "ramen", "korean cooking"]}
                ],
                shopping_behavior={
                    "trend_follower": True,
                    "idol_influenced": True,
                    "group_buying": True,
                    "collects_merchandise": True
                },
                social_platforms=["TikTok", "Twitter", "Shopee", "Instagram"],
                preferred_content=["idol_inspired", "k_drama_looks", "korean_trends", "merchandise"],
                budget_range=(300, 2000),  # PHP
                lifestyle=["fangirl", "social_media_native", "community_oriented"]
            )
        }
    
    def _get_current_trends(self) -> Dict[str, int]:
        """ÌòÑÏû¨ Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞"""
        try:
            load_dotenv()
            from database.supabase_client import SupabaseClient
            
            client = SupabaseClient()
            trends_data = client.get_latest_google_trends(limit=20)
            
            # Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞Î•º Ï†êÏàòÎ°ú Î≥ÄÌôò
            trend_scores = {}
            for record in trends_data:
                keyword = record.get('keyword', '')
                # ÏµúÍ∑º Îç∞Ïù¥ÌÑ∞ÏùºÏàòÎ°ù ÎÜíÏùÄ Ï†êÏàò
                if keyword:
                    trend_scores[keyword] = trend_scores.get(keyword, 0) + 1
            
            # Ïã§ÏãúÍ∞Ñ Ìä∏Î†åÎìúÎèÑ Ï∂îÍ∞Ä
            trend_scores.update({
                "fashion": 86,
                "makeup": 62, 
                "skincare": 25,
                "k-pop": 22,
                "food delivery": 10
            })
            
            return trend_scores
            
        except Exception as e:
            print(f"Ìä∏Î†åÎìú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®: {e}")
            return {"fashion": 86, "makeup": 62, "skincare": 25, "k-pop": 22}
    
    def _debug_print(self, message: str):
        """Print debug message and store in log"""
        if self.debug_mode:
            print(f"üîç {message}")
            self.debug_log.append(f"{datetime.now().strftime('%H:%M:%S')} - {message}")
    
    def _fuzzy_match(self, keyword: str, text: str) -> bool:
        """Enhanced matching for better keyword detection"""
        # ÌäπÎ≥ÑÌïú Îß§Ïπ≠ Í∑úÏπôÎì§
        special_matches = {
            "skincare": ["Ïä§ÌÇ®ÏºÄÏñ¥", "ÏÑ∏Îüº", "retinol", "Î†àÌã∞ÎÜÄ"],
            "makeup": ["Î©îÏù¥ÌÅ¨ÏóÖ", "Î¶ΩÎ∞§", "lip", "Ìã¥Ìä∏", "tint"],
            "tote bag": ["ÌÜ†Ìä∏Î∞±", "ÌÜ†Ìä∏ Î∞±", "bag"],
            "blazer": ["Î∏îÎ†àÏù¥Ï†Ä"],
            "sustainable": ["ÏÑúÏä§ÌÖåÏù¥ÎÑàÎ∏î", "ÏßÄÏÜçÍ∞ÄÎä•"],
            "korean": ["ÌïúÍµ≠", "ÏΩîÎ¶¨Ïïà", "k-"],
            "accessories": ["Ïï°ÏÑ∏ÏÑúÎ¶¨", "Í∞ÄÎ∞©", "bag"]
        }
        
        # ÌäπÎ≥Ñ Îß§Ïπ≠ Í∑úÏπô ÌôïÏù∏
        for match_keyword, variants in special_matches.items():
            if keyword in match_keyword or match_keyword in keyword:
                for variant in variants:
                    if variant in text:
                        return True
        
        return False
    
    def _calculate_product_score(self, product_name: str, category: str, persona: PersonaProfile) -> Dict[str, Any]:
        """Calculate detailed scoring for product recommendations"""
        scoring_details = {
            "product_name": product_name,
            "category": category,
            "base_score": 0,
            "trend_boost": 0,
            "persona_match": 0,
            "interest_alignment": 0,
            "platform_match": 0,
            "budget_compatibility": 0,
            "final_score": 0,
            "scoring_breakdown": []
        }
        
        # Base score (30 points max)
        base_score = 30
        scoring_details["base_score"] = base_score
        scoring_details["scoring_breakdown"].append(f"Base product score: +{base_score}")
        
        # Trend boost based on category (25 points max)
        trend_boost = 0
        category_lower = category.lower()
        matched_trends = []
        
        for trend_keyword, trend_score in self.trend_data.items():
            keyword_lower = trend_keyword.lower()
            # Check for category-trend matches
            if (keyword_lower in category_lower or 
                category_lower in keyword_lower or
                (category_lower == "Î©îÏù¥ÌÅ¨ÏóÖ" and keyword_lower == "makeup") or
                (category_lower == "makeup" and keyword_lower == "makeup") or
                (category_lower == "Ïä§ÌÇ®ÏºÄÏñ¥" and keyword_lower == "skincare") or
                (category_lower == "skincare" and keyword_lower == "skincare") or
                (category_lower == "Ìå®ÏÖò" and keyword_lower == "fashion") or
                (category_lower == "fashion" and keyword_lower == "fashion")):
                # Scale trend score to max 25 points (trend scores are typically 0-100)
                boost = min(25, int(trend_score * 0.25))
                trend_boost += boost
                matched_trends.append(f"{trend_keyword}({trend_score})")
        
        trend_boost = min(25, trend_boost)
        scoring_details["trend_boost"] = trend_boost
        
        if matched_trends:
            scoring_details["scoring_breakdown"].append(f"Trend boost ({', '.join(matched_trends)}): +{trend_boost}")
        else:
            scoring_details["scoring_breakdown"].append(f"Trend boost (no matches): +{trend_boost}")
        
        # Smart Interest Alignment (20 points max)
        interest_score = 0
        matching_interests = []
        matched_interest_categories = set()  # Ï§ëÎ≥µ Ï†êÏàò Î∞©ÏßÄ
        
        # ÏÉÅÌíàÎ™ÖÍ≥º Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÜåÎ¨∏ÏûêÎ°ú Î≥ÄÌôòÌïòÏó¨ Í≤ÄÏÉâ ÎåÄÏÉÅ ÌÖçÏä§Ìä∏ Ï§ÄÎπÑ
        search_text = f"{product_name.lower()} {category_lower}".strip()
        
        if self.debug_mode:
            self._debug_print(f"   üîé Smart Interest Matching for: {product_name}")
            self._debug_print(f"      Search text: '{search_text}'")
        
        for interest_obj in persona.interests:
            keyword = interest_obj["keyword"]
            related_keywords = interest_obj["related"]
            
            # Ìï¥Îãπ Í¥ÄÏã¨ÏÇ¨ Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä Ïù¥ÎØ∏ Îß§Ïπ≠ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
            if keyword in matched_interest_categories:
                continue
            
            match_found = False
            matched_keyword = None
            
            # 1. Î©îÏù∏ ÌÇ§ÏõåÎìú ÌôïÏù∏ (Î∂ÄÎ∂Ñ Î¨∏ÏûêÏó¥ Îß§Ïπ≠ Ìè¨Ìï®)
            keyword_lower = keyword.lower()
            if (keyword_lower in search_text or 
                any(part in search_text for part in keyword_lower.split()) or
                self._fuzzy_match(keyword_lower, search_text)):
                match_found = True
                matched_keyword = keyword
                if self.debug_mode:
                    self._debug_print(f"      ‚úì Main keyword match: '{keyword}'")
            
            # 2. Í¥ÄÎ†® ÌÇ§ÏõåÎìú ÌôïÏù∏ (Ìñ•ÏÉÅÎêú Îß§Ïπ≠)
            if not match_found:
                for related in related_keywords:
                    related_lower = related.lower()
                    if (related_lower in search_text or 
                        any(part in search_text for part in related_lower.split()) or
                        self._fuzzy_match(related_lower, search_text)):
                        match_found = True
                        matched_keyword = related
                        if self.debug_mode:
                            self._debug_print(f"      ‚úì Related keyword match: '{related}' for '{keyword}'")
                        break
            
            # Îß§Ïπ≠Ïù¥ Î∞úÍ≤¨ÎêòÎ©¥ Ï†êÏàò Î∂ÄÏó¨ (Í¥ÄÏã¨ÏÇ¨Îãπ 8Ï†ê)
            if match_found:
                interest_score += 8
                matching_interests.append(f"{keyword} -> {matched_keyword}")
                matched_interest_categories.add(keyword)
                
                if self.debug_mode:
                    self._debug_print(f"      üéØ Interest match: {keyword} -> {matched_keyword} (+8 points)")
        
        interest_score = min(20, interest_score)
        scoring_details["interest_alignment"] = interest_score
        
        if matching_interests:
            scoring_details["scoring_breakdown"].append(f"Interest alignment ({', '.join(matching_interests)}): +{interest_score}")
            if self.debug_mode:
                self._debug_print(f"      üìä Total interest score: +{interest_score}")
        else:
            scoring_details["scoring_breakdown"].append(f"Interest alignment (no matches): +{interest_score}")
            if self.debug_mode:
                self._debug_print(f"      ‚ùå No interest matches found")
        
        # Platform compatibility (15 points max)
        platform_score = 0
        if category_lower in ["beauty", "makeup", "skincare"] and "TikTok" in persona.social_platforms:
            platform_score += 8
            scoring_details["scoring_breakdown"].append("Platform match (TikTok + Beauty): +8")
        elif category_lower in ["fashion", "accessories"] and "Instagram" in persona.social_platforms:
            platform_score += 8
            scoring_details["scoring_breakdown"].append("Platform match (Instagram + Fashion): +8")
        
        if "Shopee" in persona.social_platforms or "Lazada" in persona.social_platforms:
            platform_score += 7
            scoring_details["scoring_breakdown"].append("E-commerce platform familiarity: +7")
        
        platform_score = min(15, platform_score)
        scoring_details["platform_match"] = platform_score
        
        # Budget compatibility (10 points max)
        budget_score = 10  # Assume compatible unless we have specific price data
        scoring_details["budget_compatibility"] = budget_score
        scoring_details["scoring_breakdown"].append(f"Budget compatibility: +{budget_score}")
        
        # Calculate final score
        final_score = base_score + trend_boost + interest_score + platform_score + budget_score
        scoring_details["final_score"] = final_score
        
        if self.debug_mode:
            self._debug_print(f"üìä Product Scoring: {product_name}")
            self._debug_print(f"   Category: {category} | Persona: {persona.name}")
            for breakdown in scoring_details["scoring_breakdown"]:
                self._debug_print(f"   ‚Ä¢ {breakdown}")
            self._debug_print(f"   üéØ Final Score: {final_score}/100")
            self._debug_print("")
        
        return scoring_details
    
    def generate_product_recommendations(self, persona_name: str) -> List[ProductRecommendation]:
        """ÌéòÎ•¥ÏÜåÎÇòÎ≥Ñ Ï†úÌíà Ï∂îÏ≤ú ÏÉùÏÑ±"""
        persona = self.personas.get(persona_name)
        if not persona:
            return []
        
        if self.debug_mode:
            self._debug_print(f"üéØ Generating product recommendations for: {persona.name}")
            self._debug_print(f"   Age Group: {persona.age_group}")
            self._debug_print(f"   Budget Range: ‚Ç±{persona.budget_range[0]}-{persona.budget_range[1]}")
            # ÏÉàÎ°úÏö¥ Íµ¨Ï°∞Ïóê ÎßûÍ≤å Í¥ÄÏã¨ÏÇ¨ ÌëúÏãú
            interest_keywords = [interest["keyword"] for interest in persona.interests[:3]]
            self._debug_print(f"   Key Interests: {', '.join(interest_keywords)}")
            self._debug_print("")
        
        recommendations = []
        
        if persona_name == "young_filipina_beauty":
            # Calculate scores for each product
            product_1_scoring = self._calculate_product_score("ÏÑ∏Ìä∏Î†àÌã∞ÎÜÄ ÎÇòÏù¥Ìä∏ ÏÑ∏Îüº", "Ïä§ÌÇ®ÏºÄÏñ¥", persona)
            product_2_scoring = self._calculate_product_score("ÏΩúÎ°úÏñ¥Ìåù Ìã¥Ìã∞Îìú Î¶ΩÎ∞§", "Î©îÏù¥ÌÅ¨ÏóÖ", persona)
            product_3_scoring = self._calculate_product_score("Ïú†ÎãàÌÅ¥Î°ú ÏóêÏñ¥Î¶¨Ï¶ò UV ÌîÑÎ°úÌÖçÏÖò Ìã∞ÏÖîÏ∏†", "Ìå®ÏÖò", persona)
            
            recommendations.extend([
                ProductRecommendation(
                    product_name="ÏÑ∏Ìä∏Î†àÌã∞ÎÜÄ ÎÇòÏù¥Ìä∏ ÏÑ∏Îüº",
                    category="Ïä§ÌÇ®ÏºÄÏñ¥",
                    price_range="‚Ç±299-599",
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('skincare', 25)}Ï†ê. Ï†ÄÎ†¥ÌïòÎ©¥ÏÑúÎèÑ Ìö®Í≥ºÏ†ÅÏù∏ Î†àÌã∞ÎÜÄ Ï†úÌíàÏúºÎ°ú TikTokÏóêÏÑú ÌôîÏ†ú",
                    where_to_buy=["Shopee", "Lazada", "Watsons"],
                    content_angle="30Ïùº Ïä§ÌÇ®ÏºÄÏñ¥ Ï±åÎ¶∞ÏßÄ - Î†àÌã∞ÎÜÄ Ï≤´ ÏÇ¨Ïö© ÌõÑÍ∏∞",
                    trending_score=product_1_scoring["final_score"]
                ),
                ProductRecommendation(
                    product_name="ÏΩúÎ°úÏñ¥Ìåù Ìã¥Ìã∞Îìú Î¶ΩÎ∞§",
                    category="Î©îÏù¥ÌÅ¨ÏóÖ",
                    price_range="‚Ç±450-650", 
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('makeup', 62)}Ï†ê. Ï†ÄÎ†¥Ìïú K-beauty ÎìÄÌîÑÎ°ú Ïù∏Í∏∞ Í∏âÏÉÅÏäπ",
                    where_to_buy=["Beauty MNL", "Shopee", "Sephora PH"],
                    content_angle="ÎπÑÏãº Î¶ΩÏä§Ìã± vs Ï†ÄÎ†¥Ìïú ÎìÄÌîÑ ÎπÑÍµê Î¶¨Î∑∞",
                    trending_score=product_2_scoring["final_score"]
                ),
                ProductRecommendation(
                    product_name="Ïú†ÎãàÌÅ¥Î°ú ÏóêÏñ¥Î¶¨Ï¶ò UV ÌîÑÎ°úÌÖçÏÖò Ìã∞ÏÖîÏ∏†",
                    category="Ìå®ÏÖò",
                    price_range="‚Ç±590-790",
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('fashion', 86)}Ï†ê. ÌïÑÎ¶¨ÌïÄ ÎÇ†Ïî®Ïóê ÏôÑÎ≤ΩÌïòÍ≥† Ìï©Î¶¨Ï†ÅÏù∏ Í∞ÄÍ≤©",
                    where_to_buy=["Uniqlo PH", "Zalora", "Shopee"],
                    content_angle="ÌïÑÎ¶¨ÌïÄ ÎçîÏúÑ Ïù¥Í∏∞Îäî ÏãúÏõêÌïú Ìå®ÏÖò ÏïÑÏù¥ÌÖú 5Í∞ÄÏßÄ",
                    trending_score=product_3_scoring["final_score"]
                )
            ])
        
        elif persona_name == "young_professional_fashionista":
            # Calculate scores for each product
            product_1_scoring = self._calculate_product_score("ÎßùÍ≥† ÏÑúÏä§ÌÖåÏù¥ÎÑàÎ∏î Î∏îÎ†àÏù¥Ï†Ä", "Ìå®ÏÖò", persona)
            product_2_scoring = self._calculate_product_score("COS ÎØ∏ÎãàÎ©Ä ÌÜ†Ìä∏Î∞±", "Ïï°ÏÑ∏ÏÑúÎ¶¨", persona)
            
            recommendations.extend([
                ProductRecommendation(
                    product_name="ÎßùÍ≥† ÏÑúÏä§ÌÖåÏù¥ÎÑàÎ∏î Î∏îÎ†àÏù¥Ï†Ä",
                    category="Ìå®ÏÖò",
                    price_range="‚Ç±2,999-4,500",
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('fashion', 86)}Ï†ê. ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ìå®ÏÖòÏù¥Î©¥ÏÑú ÏßÅÏû•ÏóêÏÑú ÏûÖÍ∏∞ Ï¢ãÏùå",
                    where_to_buy=["Mango PH", "Zalora", "Lazada"],
                    content_angle="ÏßÅÏû•Ïù∏ÏùÑ ÏúÑÌïú ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ìå®ÏÖò - 1Ï£ºÏùº ÏΩîÎîî ÏïÑÏù¥ÎîîÏñ¥",
                    trending_score=product_1_scoring["final_score"]
                ),
                ProductRecommendation(
                    product_name="COS ÎØ∏ÎãàÎ©Ä ÌÜ†Ìä∏Î∞±",
                    category="Ïï°ÏÑ∏ÏÑúÎ¶¨", 
                    price_range="‚Ç±3,500-5,500",
                    why_recommended="ÎØ∏ÎãàÎ©ÄÌïòÎ©¥ÏÑúÎèÑ Ïã§Ïö©Ï†ÅÏù∏ ÎîîÏûêÏù∏ÏúºÎ°ú Ï†ÑÎ¨∏ÏßÅ Ïó¨ÏÑ±Îì§ÏóêÍ≤å Ïù∏Í∏∞",
                    where_to_buy=["COS PH", "Zalora", "Rustan's"],
                    content_angle="Ìà¨Ïûê Í∞ÄÏπò ÏûàÎäî Í∞ÄÎ∞© - 10ÎÖÑ Ïì∏ Ïàò ÏûàÎäî Î∞± Ï∂îÏ≤ú",
                    trending_score=product_2_scoring["final_score"]
                )
            ])
        
        elif persona_name == "kpop_enthusiast":
            # Calculate scores for each product
            product_1_scoring = self._calculate_product_score("Îâ¥ÏßÑÏä§ ÌòëÏóÖ ÌïúÎÇò Î¶Ω Ìã¥Ìä∏", "Î©îÏù¥ÌÅ¨ÏóÖ", persona)
            product_2_scoring = self._calculate_product_score("ÏïÑÏù¥Ïú† ÏïÑÏù¥Ïú†Ïñ¥ Ïä§ÌÇ®ÏºÄÏñ¥ ÏÑ∏Ìä∏", "Ïä§ÌÇ®ÏºÄÏñ¥", persona)
            
            recommendations.extend([
                ProductRecommendation(
                    product_name="Îâ¥ÏßÑÏä§ ÌòëÏóÖ ÌïúÎÇò Î¶Ω Ìã¥Ìä∏",
                    category="Î©îÏù¥ÌÅ¨ÏóÖ",
                    price_range="‚Ç±899-1,200",
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('k-pop', 22)}Ï†ê + {self.trend_data.get('makeup', 62)}Ï†ê. ÏïÑÏù¥Îèå ÌòëÏóÖ Ï†úÌíàÏúºÎ°ú Ìå¨Îì§ÏóêÍ≤å ÌïÑÏàòÌÖú",
                    where_to_buy=["Shopee", "Beauty MNL", "Olive Young PH"],
                    content_angle="Îâ¥ÏßÑÏä§ Î©§Î≤ÑÎ≥Ñ Î©îÏù¥ÌÅ¨ÏóÖ Îî∞ÎùºÌïòÍ∏∞ - ÌïòÎãà Ïä§ÌÉÄÏùº",
                    trending_score=product_1_scoring["final_score"]
                ),
                ProductRecommendation(
                    product_name="ÏïÑÏù¥Ïú† ÏïÑÏù¥Ïú†Ïñ¥ Ïä§ÌÇ®ÏºÄÏñ¥ ÏÑ∏Ìä∏",
                    category="Ïä§ÌÇ®ÏºÄÏñ¥",
                    price_range="‚Ç±1,500-2,500",
                    why_recommended=f"K-pop Ïä§ÌÉÄ ÏïÑÏù¥Ïú†Ïùò Ïä§ÌÇ®ÏºÄÏñ¥ Î∏åÎûúÎìúÎ°ú ÌïúÍµ≠ Î∑∞Ìã∞ Ìä∏Î†åÎìú Î∞òÏòÅ",
                    where_to_buy=["Shopee", "Lazada", "BeautyMNL"],
                    content_angle="ÏïÑÏù¥Ïú†Ï≤òÎüº Í∏ÄÎ°úÏö∞Ìïú ÌîºÎ∂Ä ÎßåÎì§Í∏∞ - 30Ïùº Ï±åÎ¶∞ÏßÄ",
                    trending_score=product_2_scoring["final_score"]
                )
            ])
        
        return recommendations
    
    def generate_content_ideas(self, persona_name: str) -> List[ContentIdea]:
        """ÌéòÎ•¥ÏÜåÎÇòÎ≥Ñ ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±"""
        persona = self.personas.get(persona_name)
        recommendations = self.generate_product_recommendations(persona_name)
        
        if not persona:
            return []
        
        if self.debug_mode:
            self._debug_print(f"üí° Generating content ideas for: {persona.name}")
            self._debug_print(f"   Platform preferences: {', '.join(persona.social_platforms)}")
            self._debug_print(f"   Content types: {', '.join(persona.preferred_content)}")
            # Í¥ÄÏã¨ÏÇ¨ ÌÇ§ÏõåÎìú ÌëúÏãú
            interest_keywords = [interest["keyword"] for interest in persona.interests]
            self._debug_print(f"   Interest keywords: {', '.join(interest_keywords)}")
            self._debug_print("")
        
        content_ideas = []
        
        # Ï†úÌíà Ï∂îÏ≤ú Í∏∞Î∞ò ÏΩòÌÖêÏ∏†
        for rec in recommendations:
            content_ideas.append(ContentIdea(
                title=rec.content_angle,
                content_type="Product Review",
                platform="TikTok" if persona.age_group.startswith("16") or persona.age_group.startswith("18") else "Instagram",
                hook=f"ÌïÑÎ¶¨ÌïÄÏóêÏÑú ÏßÄÍ∏à Ìï´Ìïú {rec.category} ÏïÑÏù¥ÌÖúÏù¥ Î≠îÏßÄ ÏïÑÏÑ∏Ïöî?",
                key_points=[
                    f"Í∞ÄÍ≤©: {rec.price_range}",
                    f"Ï∂îÏ≤ú Ïù¥Ïú†: {rec.why_recommended}",
                    f"Íµ¨Îß§Ï≤ò: {', '.join(rec.where_to_buy[:2])}",
                    "Ïã§Ï†ú ÏÇ¨Ïö© ÌõÑÍ∏∞ Ìè¨Ìï®"
                ],
                call_to_action="ÎåìÍ∏ÄÎ°ú Ïó¨Îü¨Î∂ÑÏùò ÌõÑÍ∏∞ÎèÑ Îì§Î†§Ï£ºÏÑ∏Ïöî!",
                trend_connection=f"ÌòÑÏû¨ Ìä∏Î†åÎî© Ï†êÏàò: {rec.trending_score}Ï†ê"
            ))
        
        # ÌéòÎ•¥ÏÜåÎÇòÎ≥Ñ Ï∂îÍ∞Ä ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥
        if persona_name == "young_filipina_beauty":
            content_ideas.extend([
                ContentIdea(
                    title="‚Ç±500 Ïù¥ÌïòÎ°ú ÏôÑÏÑ±ÌïòÎäî Îç∞ÏùºÎ¶¨ Î©îÏù¥ÌÅ¨ÏóÖ",
                    content_type="Tutorial",
                    platform="TikTok",
                    hook="ÌïôÏÉùÎèÑ Î∂ÄÎã¥ ÏóÜÎäî Í∞ÄÍ≤©ÏúºÎ°ú ÏòàÏÅòÍ≤å!",
                    key_points=[
                        "Ï¥ù ÎπÑÏö© ‚Ç±450ÏúºÎ°ú ÌíÄÎ©îÏù¥ÌÅ¨ÏóÖ",
                        "Shopee, LazadaÏóêÏÑú ÏâΩÍ≤å Íµ¨Ìï† Ïàò ÏûàÎäî Ï†úÌíàÎßå",
                        "5Î∂Ñ ÏïàÏóê ÏôÑÏÑ±ÌïòÎäî Ïä§ÌîºÎìú Î©îÏù¥ÌÅ¨ÏóÖ",
                        "ÌïÑÎ¶¨ÌïÄ ÎÇ†Ïî®Ïóê ÏßÄÏõåÏßÄÏßÄ ÏïäÎäî ÌåÅ"
                    ],
                    call_to_action="Ïó¨Îü¨Î∂ÑÏùò Ï†ÄÏòàÏÇ∞ ÍøÄÌÖúÎèÑ Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî!",
                    trend_connection=f"Î©îÏù¥ÌÅ¨ÏóÖ Ìä∏Î†åÎìú Ï†êÏàò: {self.trend_data.get('makeup', 62)}Ï†ê"
                ),
                ContentIdea(
                    title="K-Î∑∞Ìã∞ vs Î°úÏª¨ Î∏åÎûúÎìú Î∏îÎùºÏù∏Îìú ÌÖåÏä§Ìä∏",
                    content_type="Challenge",
                    platform="Instagram Reels",
                    hook="ÎπÑÏãº Í≤å Ï†ïÎßê Ï¢ãÏùÑÍπå? ÏßÅÏ†ë ÌÖåÏä§Ìä∏Ìï¥Î¥§Ïñ¥Ïöî!",
                    key_points=[
                        "ÎèôÏùºÌïú Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†úÌíà 5Í∞úÏî© ÎπÑÍµê",
                        "Í∞ÄÍ≤© Í≥µÍ∞ú Ï†Ñ ÌíàÏßà ÌèâÍ∞Ä",
                        "ÌïÑÎ¶¨ÌïÄ Ïó¨ÏÑ± 10Î™Ö Î∏îÎùºÏù∏Îìú ÌÖåÏä§Ìä∏",
                        "Í∞ÄÏÑ±ÎπÑ ÌÇπ Ï†úÌíà Î∞úÌëú"
                    ],
                    call_to_action="Ïó¨Îü¨Î∂ÑÏù¥ Í∂ÅÍ∏àÌïú Î∏åÎûúÎìú ÎåÄÍ≤∞ ÎåìÍ∏ÄÎ°ú Ïã†Ï≤≠!",
                    trend_connection="Ïã§ÏãúÍ∞Ñ Î∑∞Ìã∞ Ìä∏Î†åÎìú Î∞òÏòÅ"
                )
            ])
        
        elif persona_name == "young_professional_fashionista":
            content_ideas.extend([
                ContentIdea(
                    title="ÏßÅÏû•Ïù∏ÏùÑ ÏúÑÌïú 1Ï£ºÏùº ÎØ∏ÎãàÎ©Ä ÏΩîÎîî",
                    content_type="Style Guide",
                    platform="Instagram",
                    hook="5Î≤åÎ°ú 15Í∞ÄÏßÄ Î£© ÏôÑÏÑ±ÌïòÍ∏∞",
                    key_points=[
                        "Í∏∞Î≥∏ ÏïÑÏù¥ÌÖú 5Í∞úÎ°ú Îã§ÏñëÌïú Ï°∞Ìï©",
                        "ÌïÑÎ¶¨ÌïÄ Ïò§ÌîºÏä§ Î≥µÏû• Í∑úÏ†ï Í≥†Î†§",
                        "ÏóêÏñ¥Ïª® ÌôòÍ≤ΩÍ≥º ÏïºÏô∏ Ïò®ÎèÑÏ∞® ÎåÄÎπÑ",
                        "Î∏åÎûúÎìúÎ≥Ñ Í∞ÄÍ≤©ÎåÄ ÏÉÅÏÑ∏ Ï†ïÎ≥¥"
                    ],
                    call_to_action="Ïó¨Îü¨Î∂ÑÏùò ÏßÅÏû• ÏΩîÎîî ÎÖ∏ÌïòÏö∞ÎèÑ Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî!",
                    trend_connection=f"Ìå®ÏÖò Ìä∏Î†åÎìú Ï†êÏàò: {self.trend_data.get('fashion', 86)}Ï†ê"
                ),
                ContentIdea(
                    title="ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ìå®ÏÖò, Ïù¥Ï†ú ÌïÑÎ¶¨ÌïÄÏóêÏÑúÎèÑ!",
                    content_type="Educational",
                    platform="Instagram Stories + Feed",
                    hook="ÌôòÍ≤ΩÎèÑ ÏÉùÍ∞ÅÌïòÍ≥† Ïä§ÌÉÄÏùºÎèÑ ÏÇ¥Î¶¨Îäî Ìå®ÏÖò ÌåÅ",
                    key_points=[
                        "ÌïÑÎ¶¨ÌïÄÏóêÏÑú Íµ¨Ìï† Ïàò ÏûàÎäî ÏπúÌôòÍ≤Ω Î∏åÎûúÎìú",
                        "Í∏∞Ï°¥ Ïò∑Ïû• ÌôúÏö©Ìïú ÏÉàÎ°úÏö¥ Ïä§ÌÉÄÏùºÎßÅ",
                        "ÏùòÎ•ò Ïû¨ÌôúÏö© Î∞è ÏóÖÏÇ¨Ïù¥ÌÅ¥ÎßÅ Î∞©Î≤ï",
                        "Ïû•Í∏∞Ï†ÅÏúºÎ°ú Í≤ΩÏ†úÏ†ÅÏù∏ ÏáºÌïë Ï†ÑÎûµ"
                    ],
                    call_to_action="ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ìå®ÏÖò Ïã§Ï≤ú Ïù∏Ï¶ùÏÉ∑ Ìï¥ÏãúÌÉúÍ∑∏ÏôÄ Ìï®Íªò!",
                    trend_connection="ÏßÄÏÜçÍ∞ÄÎä•ÏÑ± Ìä∏Î†åÎìú Í∏âÏÉÅÏäπ"
                )
            ])
        
        elif persona_name == "kpop_enthusiast":
            content_ideas.extend([
                ContentIdea(
                    title="2025ÎÖÑ K-pop ÏïÑÏù¥Îèå Î©îÏù¥ÌÅ¨ÏóÖ Ìä∏Î†åÎìú Ï¥ùÏ†ïÎ¶¨",
                    content_type="Trend Analysis",
                    platform="TikTok",
                    hook="Ïò¨Ìï¥ Í∞ÄÏû• Ìï´Ìïú ÏïÑÏù¥Îèå Î©îÏù¥ÌÅ¨ÏóÖÏùÄ Ïù¥Í±∞ÏòÄÏñ¥!",
                    key_points=[
                        "Îâ¥ÏßÑÏä§, ÏïÑÏù¥Î∏å, Î•¥ÏÑ∏ÎùºÌïå ÏãúÍ∑∏ÎãàÏ≤ò Î£©",
                        "ÏïÑÏù¥ÎèåÎ≥Ñ ÎåÄÌëú Î©îÏù¥ÌÅ¨ÏóÖ Îî∞ÎùºÌïòÍ∏∞",
                        "ÌïÑÎ¶¨ÌïÄÏóêÏÑú Íµ¨Ìï† Ïàò ÏûàÎäî Ïú†ÏÇ¨ Ï†úÌíà",
                        "Í∞Å Î©§Î≤ÑÎ≥Ñ ÌçºÏä§ÎÑê Ïª¨Îü¨ Î∂ÑÏÑù"
                    ],
                    call_to_action="Ïó¨Îü¨Î∂ÑÏù¥ Îî∞ÎùºÌïòÍ≥† Ïã∂ÏùÄ ÏïÑÏù¥Îèå Î©îÏù¥ÌÅ¨ÏóÖ Ìà¨Ìëú!",
                    trend_connection=f"K-pop Ìä∏Î†åÎìú Ï†êÏàò: {self.trend_data.get('k-pop', 22)}Ï†ê"
                ),
                ContentIdea(
                    title="K-drama Ïó¨Ï£ºÏù∏Í≥µ Î£©Î∂Å - ÌïÑÎ¶¨ÌïÄ Î≤ÑÏ†Ñ",
                    content_type="Lookbook",
                    platform="Instagram + TikTok",
                    hook="ÎìúÎùºÎßà ÏÜç Í∑∏ Ïò∑, ÌïÑÎ¶¨ÌïÄÏóêÏÑúÎèÑ ÏûÖÏùÑ Ïàò ÏûàÏñ¥Ïöî!",
                    key_points=[
                        "Ïù∏Í∏∞ K-drama Ïó¨Ï£ºÏù∏Í≥µ Ïä§ÌÉÄÏùº Î∂ÑÏÑù",
                        "ÌïÑÎ¶¨ÌïÄ ÎÇ†Ïî®Ïóê ÎßûÍ≤å Î≥ÄÌòïÌïú ÏΩîÎîî",
                        "Î°úÏª¨ ÏáºÌïëÎ™∞ÏóêÏÑú Íµ¨Ìï† Ïàò ÏûàÎäî Ïú†ÏÇ¨ÌÖú",
                        "Ï¥ù ÎπÑÏö©Í≥º Íµ¨Îß§ ÎßÅÌÅ¨ Ï†úÍ≥µ"
                    ],
                    call_to_action="Ïó¨Îü¨Î∂ÑÏù¥ Îî∞ÎùºÌïòÍ≥† Ïã∂ÏùÄ ÎìúÎùºÎßà Ï∫êÎ¶≠ÌÑ∞ ÎåìÍ∏ÄÎ°ú!",
                    trend_connection="ÌïúÎ•ò Î¨∏Ìôî Ìä∏Î†åÎìú ÏßÄÏÜç ÏÉÅÏäπ"
                )
            ])
        
        return content_ideas
    
    def generate_full_recommendation_report(self) -> Dict[str, Any]:
        """Ï†ÑÏ≤¥ Ï∂îÏ≤ú Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        if self.debug_mode:
            self._debug_print("üìã Generating full recommendation report...")
            self._debug_print("")
        
        report = {
            "generated_at": datetime.now().isoformat(),
            "debug_mode": self.debug_mode,
            "trend_data": self.trend_data,
            "personas": {}
        }
        
        if self.debug_mode:
            report["debug_log"] = self.debug_log.copy()
        
        for persona_name in self.personas.keys():
            if self.debug_mode:
                print(f"\n{'='*60}")
                print(f"üë§ PERSONA ANALYSIS: {self.personas[persona_name].name}")
                print(f"{'='*60}")
            
            persona = self.personas[persona_name]
            recommendations = self.generate_product_recommendations(persona_name)
            content_ideas = self.generate_content_ideas(persona_name)
            
            # Calculate persona statistics
            total_score = sum(rec.trending_score for rec in recommendations)
            avg_score = total_score / len(recommendations) if recommendations else 0
            high_score_products = [rec for rec in recommendations if rec.trending_score >= 70]
            
            if self.debug_mode:
                self._debug_print(f"üìä Persona Summary Statistics:")
                self._debug_print(f"   Total Products: {len(recommendations)}")
                self._debug_print(f"   Average Score: {avg_score:.1f}/100")
                self._debug_print(f"   High Score Products (‚â•70): {len(high_score_products)}")
                self._debug_print(f"   Content Ideas Generated: {len(content_ideas)}")
                self._debug_print("")
            
            report["personas"][persona_name] = {
                "profile": {
                    "name": persona.name,
                    "age_group": persona.age_group,
                    "income_level": persona.income_level,
                    "budget_range": f"‚Ç±{persona.budget_range[0]}-{persona.budget_range[1]}",
                    "main_interests": [interest["keyword"] for interest in persona.interests[:3]]
                },
                "statistics": {
                    "total_products": len(recommendations),
                    "average_score": round(avg_score, 1),
                    "high_score_products": len(high_score_products),
                    "content_ideas_count": len(content_ideas)
                },
                "product_recommendations": [
                    {
                        "product": rec.product_name,
                        "category": rec.category,
                        "price": rec.price_range,
                        "reason": rec.why_recommended,
                        "trending_score": rec.trending_score
                    } for rec in recommendations
                ],
                "content_ideas": [
                    {
                        "title": idea.title,
                        "type": idea.content_type,
                        "platform": idea.platform,
                        "hook": idea.hook
                    } for idea in content_ideas
                ]
            }
        
        if self.debug_mode:
            print(f"\n{'='*80}")
            print("üéØ TRANSPARENCY REPORT SUMMARY")
            print(f"{'='*80}")
            print(f"üìä Total Personas Analyzed: {len(self.personas)}")
            print(f"üìà Total Trend Keywords Used: {len(self.trend_data)}")
            
            total_products = sum(len(persona_data["product_recommendations"]) for persona_data in report["personas"].values())
            total_content = sum(len(persona_data["content_ideas"]) for persona_data in report["personas"].values())
            
            print(f"üõçÔ∏è Total Product Recommendations: {total_products}")
            print(f"üí° Total Content Ideas: {total_content}")
            print(f"üîç Debug Log Entries: {len(self.debug_log)}")
            print(f"‚è∞ Report Generated: {report['generated_at']}")
            print(f"{'='*80}")
        
        return report

    def _map_user_interests_to_keywords(self, user_interests: List[str]) -> List[Dict[str, Any]]:
        """ÏÇ¨Ïö©Ïûê Í¥ÄÏã¨ÏÇ¨Î•º ÎÇ¥Î∂Ä ÌÇ§ÏõåÎìú Íµ¨Ï°∞Î°ú Îß§Ìïë"""
        # Í¥ÄÏã¨ÏÇ¨Î≥Ñ Í¥ÄÎ†® ÌÇ§ÏõåÎìú Îß§Ìïë
        interest_mapping = {
            "vintage camera": {
                "keyword": "vintage photography",
                "related": ["camera", "vintage", "photography", "film", "analog", "retro camera", "vintage equipment"]
            },
            "specialty coffee": {
                "keyword": "specialty coffee", 
                "related": ["coffee", "cafe", "specialty", "brewing", "espresso", "latte", "coffee beans", "barista"]
            },
            "book reviews": {
                "keyword": "book reviews",
                "related": ["book", "review", "reading", "literature", "novel", "bestseller", "bookworm", "reading list"]
            },
            "slow living": {
                "keyword": "slow living",
                "related": ["minimalist", "slow", "mindful", "sustainable", "wellness", "simple living", "mindfulness"]
            },
            "sustainable fashion": {
                "keyword": "sustainable fashion",
                "related": ["eco-friendly", "recycled", "organic cotton", "upcycled", "ethical fashion", "green fashion", "sustainable"]
            },
            "workwear": {
                "keyword": "workwear",
                "related": ["blazer", "tote bag", "slacks", "office look", "shirt", "blouse", "work outfit", "professional", "business casual", "office wear"]
            },
            "korean fashion": {
                "keyword": "Korean fashion",
                "related": ["k-fashion", "hongdae style", "wide pants", "seoul fashion", "korean style", "korean brand"]
            },
            "accessories": {
                "keyword": "accessories",
                "related": ["bag", "handbag", "jewelry", "watch", "scarf", "belt", "purse", "wallet", "tote", "crossbody"]
            },
            "k-beauty": {
                "keyword": "K-beauty",
                "related": ["korean skincare", "k-skincare", "korean makeup", "korean cosmetics", "korean brand"]
            },
            "skincare": {
                "keyword": "skincare",
                "related": ["serum", "moisturizer", "cleanser", "toner", "sunscreen", "face mask", "retinol", "vitamin c"]
            },
            "makeup": {
                "keyword": "makeup tutorials",
                "related": ["makeup", "tutorial", "cosmetics", "lip tint", "foundation", "concealer", "eyeshadow", "blush"]
            },
            "k-pop": {
                "keyword": "K-pop",
                "related": ["idol", "korean music", "k-music", "korean idol", "boy group", "girl group", "kpop", "korean pop"]
            },
            "k-drama": {
                "keyword": "K-drama", 
                "related": ["korean drama", "kdrama", "korean series", "korean actor", "korean actress", "korean show"]
            },
            "korean food": {
                "keyword": "Korean food",
                "related": ["korean cuisine", "k-food", "korean restaurant", "korean snack", "kimchi", "ramen", "korean cooking"]
            }
        }
        
        mapped_interests = []
        for interest in user_interests:
            interest_lower = interest.lower()
            
            # Ï†ïÌôïÌïú Îß§Ïπò Ï∞æÍ∏∞
            if interest_lower in interest_mapping:
                mapped_interests.append(interest_mapping[interest_lower])
            else:
                # Î∂ÄÎ∂Ñ Îß§Ïπò Ï∞æÍ∏∞
                found = False
                for key, value in interest_mapping.items():
                    if interest_lower in key or key in interest_lower:
                        mapped_interests.append(value)
                        found = True
                        break
                
                # Îß§ÏπòÎêòÏßÄ ÏïäÏúºÎ©¥ ÏùºÎ∞òÏ†ÅÏù∏ Íµ¨Ï°∞Î°ú Ï∂îÍ∞Ä
                if not found:
                    mapped_interests.append({
                        "keyword": interest,
                        "related": [interest.lower(), interest.replace(" ", "")]
                    })
        
        return mapped_interests
    
    def _create_persona_from_dict(self, user_data: Dict[str, Any]) -> PersonaProfile:
        """ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÎîïÏÖîÎÑàÎ¶¨ÏóêÏÑú PersonaProfile Í∞ùÏ≤¥ ÏÉùÏÑ±"""
        # MBTIÎ≥Ñ Í∏∞Î≥∏ ÌäπÏÑ± Îß§Ìïë
        mbti_traits = {
            "INFJ": {
                "shopping_behavior": {"quality_focused": True, "research_oriented": True, "values_authenticity": True},
                "preferred_content": ["in_depth_reviews", "tutorials", "brand_stories"],
                "personality_traits": ["introspective", "value-driven", "perfectionist"]
            },
            "ENFP": {
                "shopping_behavior": {"trend_follower": True, "influenced_by_reviews": True, "spontaneous": True},
                "preferred_content": ["trends", "lifestyle", "inspiration"],
                "personality_traits": ["enthusiastic", "creative", "social"]
            },
            "INTJ": {
                "shopping_behavior": {"efficiency_focused": True, "quality_over_quantity": True, "research_oriented": True},
                "preferred_content": ["detailed_analysis", "comparisons", "long_term_value"],
                "personality_traits": ["strategic", "independent", "quality-focused"]
            },
            "ESFP": {
                "shopping_behavior": {"trend_follower": True, "social_influenced": True, "spontaneous": True},
                "preferred_content": ["trends", "social_proof", "entertainment"],
                "personality_traits": ["spontaneous", "social", "fun-loving"]
            }
        }
        
        # ÏòàÏÇ∞ Î†àÎ≤® Îß§Ìïë
        budget_mapping = {
            "low": (200, 1500),
            "medium": (1000, 5000), 
            "high": (3000, 15000)
        }
        
        # Ï±ÑÎÑê Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÜåÏÖú ÌîåÎû´Ìèº Îß§Ìïë
        platform_mapping = {
            "Tech": ["YouTube", "Instagram", "Twitter"],
            "Fashion": ["Instagram", "Pinterest", "TikTok"],
            "Food/Travel": ["Instagram", "YouTube", "TikTok"],
            "Beauty": ["TikTok", "Instagram", "YouTube"],
            "Lifestyle": ["Instagram", "Pinterest", "YouTube"]
        }
        
        mbti = user_data.get("mbti", "INFJ")
        channel_category = user_data.get("channel_category", "Lifestyle")
        budget_level = user_data.get("budget_level", "medium")
        user_interests = user_data.get("interests", [])
        
        # MBTI ÌäπÏÑ± Í∞ÄÏ†∏Ïò§Í∏∞
        traits = mbti_traits.get(mbti, mbti_traits["INFJ"])
        
        # Í¥ÄÏã¨ÏÇ¨ Îß§Ìïë
        mapped_interests = self._map_user_interests_to_keywords(user_interests)
        
        # PersonaProfile ÏÉùÏÑ±
        persona = PersonaProfile(
            name=f"Custom User ({mbti})",
            age_group="25-35",  # Í∏∞Î≥∏Í∞í
            income_level="Middle",  # ÏòàÏÇ∞ Î†àÎ≤®Ïóê Îî∞Îùº Ï°∞Ï†ï Í∞ÄÎä•
            interests=mapped_interests,
            shopping_behavior=traits["shopping_behavior"],
            social_platforms=platform_mapping.get(channel_category, ["Instagram", "YouTube"]),
            preferred_content=traits["preferred_content"],
            budget_range=budget_mapping.get(budget_level, (1000, 5000)),
            lifestyle=traits["personality_traits"] + [f"{channel_category.lower()}_focused"]
        )
        
        if self.debug_mode:
            self._debug_print(f"üéØ Custom persona created: {persona.name}")
            self._debug_print(f"   MBTI: {mbti} | Channel: {channel_category} | Budget: {budget_level}")
            self._debug_print(f"   Interests: {[i['keyword'] for i in mapped_interests]}")
            self._debug_print(f"   Platforms: {persona.social_platforms}")
            self._debug_print("")
        
        return persona

    def generate_custom_recommendation(self, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """ÏÇ¨Ïö©Ïûê ÎßûÏ∂§ Ï∂îÏ≤ú ÏÉùÏÑ± (APIÏö© Î©îÏù∏ Ìï®Ïàò)"""
        if self.debug_mode:
            self._debug_print("üöÄ Starting Custom Recommendation Generation")
            self._debug_print(f"   User Data: {user_data}")
        
        # ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ÏóêÏÑú ÌéòÎ•¥ÏÜåÎÇò ÏÉùÏÑ±
        custom_persona = self._create_persona_from_dict(user_data)
        
        # ÎßûÏ∂§ Ï†úÌíà Ï∂îÏ≤ú ÏÉùÏÑ±
        recommendations = self._generate_custom_product_recommendations(custom_persona)
        
        # ÎßûÏ∂§ ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±
        content_ideas = self._generate_custom_content_ideas(custom_persona, recommendations)
        
        # Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
        report = self._create_custom_report(custom_persona, recommendations, content_ideas, user_data)
        
        if self.debug_mode:
            self._debug_print(f"‚úÖ Custom recommendation completed")
            self._debug_print(f"   Generated {len(recommendations)} products and {len(content_ideas)} content ideas")
        
        return report

    def _generate_custom_product_recommendations(self, persona: PersonaProfile) -> List[ProductRecommendation]:
        """ÎßûÏ∂§ ÌéòÎ•¥ÏÜåÎÇòÎ•º ÏúÑÌïú Ï†úÌíà Ï∂îÏ≤ú ÏÉùÏÑ±"""
        if self.debug_mode:
            self._debug_print(f"üõçÔ∏è Generating custom product recommendations")
            self._debug_print(f"   Budget range: ‚Ç±{persona.budget_range[0]}-{persona.budget_range[1]}")
        
        recommendations = []
        
        # Í¥ÄÏã¨ÏÇ¨ Í∏∞Î∞ò Ï†úÌíà Îß§Ïπ≠ 
        interest_keywords = [interest["keyword"].lower() for interest in persona.interests]
        
        # Ìå®ÏÖò/Ïï°ÏÑ∏ÏÑúÎ¶¨ Í¥ÄÎ†® Ï†úÌíàÎì§
        if any(keyword in interest for interest in interest_keywords for keyword in ["fashion", "workwear", "accessories", "sustainable"]):
            if persona.budget_range[1] >= 3000:  # Ï§ëÏÉÅÏúÑ ÏòàÏÇ∞
                product_scoring = self._calculate_product_score("ÎßùÍ≥† ÏÑúÏä§ÌÖåÏù¥ÎÑàÎ∏î Î∏îÎ†àÏù¥Ï†Ä", "Ìå®ÏÖò", persona)
                recommendations.append(ProductRecommendation(
                    product_name="ÎßùÍ≥† ÏÑúÏä§ÌÖåÏù¥ÎÑàÎ∏î Î∏îÎ†àÏù¥Ï†Ä",
                    category="Ìå®ÏÖò",
                    price_range="‚Ç±2,999-4,500",
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('fashion', 86)}Ï†ê. ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ìå®ÏÖòÏù¥Î©¥ÏÑú ÏßÅÏû•ÏóêÏÑú ÏûÖÍ∏∞ Ï¢ãÏùå",
                    where_to_buy=["Mango PH", "Zalora", "Lazada"],
                    content_angle="ÏßÅÏû•Ïù∏ÏùÑ ÏúÑÌïú ÏßÄÏÜçÍ∞ÄÎä•Ìïú Ìå®ÏÖò - 1Ï£ºÏùº ÏΩîÎîî ÏïÑÏù¥ÎîîÏñ¥",
                    trending_score=product_scoring["final_score"]
                ))
                
                bag_scoring = self._calculate_product_score("COS ÎØ∏ÎãàÎ©Ä ÌÜ†Ìä∏Î∞±", "Ïï°ÏÑ∏ÏÑúÎ¶¨", persona)
                recommendations.append(ProductRecommendation(
                    product_name="COS ÎØ∏ÎãàÎ©Ä ÌÜ†Ìä∏Î∞±", 
                    category="Ïï°ÏÑ∏ÏÑúÎ¶¨",
                    price_range="‚Ç±3,500-5,500",
                    why_recommended="ÎØ∏ÎãàÎ©ÄÌïòÎ©¥ÏÑúÎèÑ Ïã§Ïö©Ï†ÅÏù∏ ÎîîÏûêÏù∏ÏúºÎ°ú Ï†ÑÎ¨∏ÏßÅ Ïó¨ÏÑ±Îì§ÏóêÍ≤å Ïù∏Í∏∞",
                    where_to_buy=["COS PH", "Zalora", "Rustan's"],
                    content_angle="Ìà¨Ïûê Í∞ÄÏπò ÏûàÎäî Í∞ÄÎ∞© - 10ÎÖÑ Ïì∏ Ïàò ÏûàÎäî Î∞± Ï∂îÏ≤ú",
                    trending_score=bag_scoring["final_score"]
                ))
            else:  # Ï†ÄÏòàÏÇ∞
                shirt_scoring = self._calculate_product_score("Ïú†ÎãàÌÅ¥Î°ú ÏóêÏñ¥Î¶¨Ï¶ò UV ÌîÑÎ°úÌÖçÏÖò Ìã∞ÏÖîÏ∏†", "Ìå®ÏÖò", persona)
                recommendations.append(ProductRecommendation(
                    product_name="Ïú†ÎãàÌÅ¥Î°ú ÏóêÏñ¥Î¶¨Ï¶ò UV ÌîÑÎ°úÌÖçÏÖò Ìã∞ÏÖîÏ∏†",
                    category="Ìå®ÏÖò", 
                    price_range="‚Ç±590-790",
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('fashion', 86)}Ï†ê. ÌïÑÎ¶¨ÌïÄ ÎÇ†Ïî®Ïóê ÏôÑÎ≤ΩÌïòÍ≥† Ìï©Î¶¨Ï†ÅÏù∏ Í∞ÄÍ≤©",
                    where_to_buy=["Uniqlo PH", "Zalora", "Shopee"],
                    content_angle="ÌïÑÎ¶¨ÌïÄ ÎçîÏúÑ Ïù¥Í∏∞Îäî ÏãúÏõêÌïú Ìå®ÏÖò ÏïÑÏù¥ÌÖú 5Í∞ÄÏßÄ",
                    trending_score=shirt_scoring["final_score"]
                ))
        
        # Î∑∞Ìã∞/Ïä§ÌÇ®ÏºÄÏñ¥ Í¥ÄÎ†® Ï†úÌíàÎì§
        if any(keyword in interest for interest in interest_keywords for keyword in ["beauty", "skincare", "makeup", "k-beauty"]):
            serum_scoring = self._calculate_product_score("ÏÑ∏Ìä∏Î†àÌã∞ÎÜÄ ÎÇòÏù¥Ìä∏ ÏÑ∏Îüº", "Ïä§ÌÇ®ÏºÄÏñ¥", persona)
            recommendations.append(ProductRecommendation(
                product_name="ÏÑ∏Ìä∏Î†àÌã∞ÎÜÄ ÎÇòÏù¥Ìä∏ ÏÑ∏Îüº",
                category="Ïä§ÌÇ®ÏºÄÏñ¥",
                price_range="‚Ç±299-599", 
                why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('skincare', 25)}Ï†ê. Ï†ÄÎ†¥ÌïòÎ©¥ÏÑúÎèÑ Ìö®Í≥ºÏ†ÅÏù∏ Î†àÌã∞ÎÜÄ Ï†úÌíàÏúºÎ°ú TikTokÏóêÏÑú ÌôîÏ†ú",
                where_to_buy=["Shopee", "Lazada", "Watsons"],
                content_angle="30Ïùº Ïä§ÌÇ®ÏºÄÏñ¥ Ï±åÎ¶∞ÏßÄ - Î†àÌã∞ÎÜÄ Ï≤´ ÏÇ¨Ïö© ÌõÑÍ∏∞",
                trending_score=serum_scoring["final_score"]
            ))
            
            if persona.budget_range[1] >= 800:
                lip_scoring = self._calculate_product_score("ÏΩúÎ°úÏñ¥Ìåù Ìã¥Ìã∞Îìú Î¶ΩÎ∞§", "Î©îÏù¥ÌÅ¨ÏóÖ", persona)
                recommendations.append(ProductRecommendation(
                    product_name="ÏΩúÎ°úÏñ¥Ìåù Ìã¥Ìã∞Îìú Î¶ΩÎ∞§",
                    category="Î©îÏù¥ÌÅ¨ÏóÖ",
                    price_range="‚Ç±450-650",
                    why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('makeup', 62)}Ï†ê. Ï†ÄÎ†¥Ìïú K-beauty ÎìÄÌîÑÎ°ú Ïù∏Í∏∞ Í∏âÏÉÅÏäπ",
                    where_to_buy=["Beauty MNL", "Shopee", "Sephora PH"],
                    content_angle="ÎπÑÏãº Î¶ΩÏä§Ìã± vs Ï†ÄÎ†¥Ìïú ÎìÄÌîÑ ÎπÑÍµê Î¶¨Î∑∞",
                    trending_score=lip_scoring["final_score"]
                ))
        
        # K-pop/Korean culture Í¥ÄÎ†® Ï†úÌíàÎì§  
        if any(keyword in interest for interest in interest_keywords for keyword in ["k-pop", "korean", "k-drama"]):
            kpop_scoring = self._calculate_product_score("Îâ¥ÏßÑÏä§ ÌòëÏóÖ ÌïúÎÇò Î¶Ω Ìã¥Ìä∏", "Î©îÏù¥ÌÅ¨ÏóÖ", persona)
            recommendations.append(ProductRecommendation(
                product_name="Îâ¥ÏßÑÏä§ ÌòëÏóÖ ÌïúÎÇò Î¶Ω Ìã¥Ìä∏",
                category="Î©îÏù¥ÌÅ¨ÏóÖ",
                price_range="‚Ç±899-1,200",
                why_recommended=f"Ìä∏Î†åÎìú Ïä§ÏΩîÏñ¥ {self.trend_data.get('k-pop', 22)}Ï†ê + {self.trend_data.get('makeup', 62)}Ï†ê. ÏïÑÏù¥Îèå ÌòëÏóÖ Ï†úÌíàÏúºÎ°ú Ìå¨Îì§ÏóêÍ≤å ÌïÑÏàòÌÖú",
                where_to_buy=["Shopee", "Beauty MNL", "Olive Young PH"],
                content_angle="Îâ¥ÏßÑÏä§ Î©§Î≤ÑÎ≥Ñ Î©îÏù¥ÌÅ¨ÏóÖ Îî∞ÎùºÌïòÍ∏∞ - ÌïòÎãà Ïä§ÌÉÄÏùº",
                trending_score=kpop_scoring["final_score"]
            ))
        
        # Í¥ÄÏã¨ÏÇ¨Í∞Ä ÏóÜÍ±∞ÎÇò ÌäπÎ≥ÑÌïú Ï∑®Ìñ•Ïù∏ Í≤ΩÏö∞ Í∏∞Î≥∏ Ï∂îÏ≤ú
        if not recommendations:
            default_scoring = self._calculate_product_score("Ïú†ÎãàÌÅ¥Î°ú ÏóêÏñ¥Î¶¨Ï¶ò UV ÌîÑÎ°úÌÖçÏÖò Ìã∞ÏÖîÏ∏†", "Ìå®ÏÖò", persona)  
            recommendations.append(ProductRecommendation(
                product_name="Ïú†ÎãàÌÅ¥Î°ú ÏóêÏñ¥Î¶¨Ï¶ò UV ÌîÑÎ°úÌÖçÏÖò Ìã∞ÏÖîÏ∏†",
                category="Ìå®ÏÖò",
                price_range="‚Ç±590-790",
                why_recommended="ÌïÑÎ¶¨ÌïÄ ÎÇ†Ïî®Ïóê Ï†ÅÌï©Ìïú Í∏∞Î≥∏ ÏïÑÏù¥ÌÖú",
                where_to_buy=["Uniqlo PH", "Zalora", "Shopee"],
                content_angle="ÌïÑÎ¶¨ÌïÄ ÏÉùÌôú ÌïÑÏàòÌÖú - Ïã§Ïö©Ï†ÅÏù∏ Ïò∑Ï∞®Î¶º",
                trending_score=default_scoring["final_score"]
            ))
        
        if self.debug_mode:
            for rec in recommendations:
                self._debug_print(f"   üì¶ {rec.product_name} (Score: {rec.trending_score})")
        
        return recommendations

    def _generate_custom_content_ideas(self, persona: PersonaProfile, recommendations: List[ProductRecommendation]) -> List[ContentIdea]:
        """ÎßûÏ∂§ ÌéòÎ•¥ÏÜåÎÇòÎ•º ÏúÑÌïú ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±"""
        if self.debug_mode:
            self._debug_print(f"üí° Generating custom content ideas")
            self._debug_print(f"   Target platforms: {persona.social_platforms}")
        
        content_ideas = []
        
        # Ï†úÌíà Í∏∞Î∞ò ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥
        for rec in recommendations:
            primary_platform = persona.social_platforms[0] if persona.social_platforms else "Instagram"
            
            content_ideas.append(ContentIdea(
                title=rec.content_angle,
                content_type="Product Review",
                platform=primary_platform,
                hook=f"ÌïÑÎ¶¨ÌïÄÏóêÏÑú ÏßÄÍ∏à Ìï´Ìïú {rec.category} ÏïÑÏù¥ÌÖúÏù¥ Î≠îÏßÄ ÏïÑÏÑ∏Ïöî?",
                key_points=[
                    f"Í∞ÄÍ≤©: {rec.price_range}",
                    f"Ï∂îÏ≤ú Ïù¥Ïú†: {rec.why_recommended}",
                    f"Íµ¨Îß§Ï≤ò: {', '.join(rec.where_to_buy[:2])}",
                    "Ïã§Ï†ú ÏÇ¨Ïö© ÌõÑÍ∏∞ Ìè¨Ìï®"
                ],
                call_to_action="ÎåìÍ∏ÄÎ°ú Ïó¨Îü¨Î∂ÑÏùò ÌõÑÍ∏∞ÎèÑ Îì§Î†§Ï£ºÏÑ∏Ïöî!",
                trend_connection=f"ÌòÑÏû¨ Ìä∏Î†åÎî© Ï†êÏàò: {rec.trending_score}Ï†ê"
            ))
        
        # Í¥ÄÏã¨ÏÇ¨ Í∏∞Î∞ò ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥
        interest_keywords = [interest["keyword"] for interest in persona.interests[:2]]
        for interest in interest_keywords:
            platform = persona.social_platforms[0] if persona.social_platforms else "Instagram"
            
            content_ideas.append(ContentIdea(
                title=f"{interest} Ìä∏Î†åÎìú Î∂ÑÏÑù - 2025ÎÖÑ Ï£ºÎ™©Ìï† Ï†ê",
                content_type="Trend Analysis",
                platform=platform,
                hook=f"{interest}Ïóê Í¥ÄÏã¨ ÏûàÎã§Î©¥ ÎÜìÏπòÎ©¥ Ïïà Îê† Ïù¥ÏïºÍ∏∞!",
                key_points=[
                    f"{interest} ÏµúÏã† Ìä∏Î†åÎìú ÏÜåÍ∞ú",
                    "ÌïÑÎ¶¨ÌïÄ ÏãúÏû•ÏóêÏÑúÏùò Ïù∏Í∏∞ÎèÑ",
                    "Ïã§Ï†ú Íµ¨Îß§ Í∞ÄÏù¥Îìú",
                    "ÏòàÏÇ∞Î≥Ñ Ï∂îÏ≤úÌÖú"
                ],
                call_to_action="Ïó¨Îü¨Î∂ÑÏùÄ Ïñ¥Îñ§ {interest} ÏïÑÏù¥ÌÖúÏóê Í¥ÄÏã¨ ÏûàÎÇòÏöî?",
                trend_connection=f"{interest} Í¥ÄÎ†® Í≤ÄÏÉâÎüâ ÏÉÅÏäπ Ï§ë"
            ))
        
        return content_ideas

    def _create_custom_report(self, persona: PersonaProfile, recommendations: List[ProductRecommendation], 
                            content_ideas: List[ContentIdea], user_data: Dict[str, Any]) -> Dict[str, Any]:
        """ÎßûÏ∂§ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
        # ÌèâÍ∑† Ï†êÏàò Í≥ÑÏÇ∞
        avg_score = sum(rec.trending_score for rec in recommendations) / len(recommendations) if recommendations else 0
        high_score_products = [rec for rec in recommendations if rec.trending_score >= 70]
        
        report = {
            "generated_at": datetime.now().isoformat(),
            "user_profile": {
                "mbti": user_data.get("mbti"),
                "interests": user_data.get("interests"),
                "channel_category": user_data.get("channel_category"),
                "budget_level": user_data.get("budget_level"),
                "persona_name": persona.name
            },
            "statistics": {
                "total_products": len(recommendations),
                "average_score": round(avg_score, 1),
                "high_score_products": len(high_score_products),
                "content_ideas_count": len(content_ideas)
            },
            "product_recommendations": [
                {
                    "product": rec.product_name,
                    "category": rec.category,
                    "price": rec.price_range,
                    "reason": rec.why_recommended,
                    "trending_score": rec.trending_score,
                    "where_to_buy": rec.where_to_buy,
                    "content_angle": rec.content_angle
                } for rec in recommendations
            ],
            "content_ideas": [
                {
                    "title": idea.title,
                    "type": idea.content_type,
                    "platform": idea.platform,
                    "hook": idea.hook,
                    "key_points": idea.key_points,
                    "call_to_action": idea.call_to_action
                } for idea in content_ideas
            ],
            "debug_info": self.debug_log if self.debug_mode else None
        }
        
        return report

def main():
    """Î©îÏù∏ Ïã§Ìñâ"""
    print("üéØ PERSONA-BASED RECOMMENDATION ENGINE")
    print("=" * 70)
    print(f"‚è∞ ÏÉùÏÑ± ÏãúÍ∞Ñ: {datetime.now().strftime('%YÎÖÑ %mÏõî %dÏùº %H:%M:%S')}")
    print()
    
    engine = PersonaRecommendationEngine()
    
    for persona_name, persona in engine.personas.items():
        print(f"üë§ ÌéòÎ•¥ÏÜåÎÇò: {persona.name}")
        print(f"üí∞ ÏòàÏÇ∞: ‚Ç±{persona.budget_range[0]}-{persona.budget_range[1]}")
        print()
        
        # Ï†úÌíà Ï∂îÏ≤ú
        recommendations = engine.generate_product_recommendations(persona_name)
        print("üõçÔ∏è ÎßûÏ∂§ Ï†úÌíà Ï∂îÏ≤ú:")
        for i, rec in enumerate(recommendations, 1):
            print(f"   {i}. {rec.product_name}")
            print(f"      üí∞ Í∞ÄÍ≤©: {rec.price_range}")
            print(f"      üìä Ìä∏Î†åÎìú Ï†êÏàò: {rec.trending_score}Ï†ê")
            print(f"      ‚ú® Ï∂îÏ≤ú Ïù¥Ïú†: {rec.why_recommended}")
            print(f"      üõí Íµ¨Îß§Ï≤ò: {', '.join(rec.where_to_buy)}")
            print()
        
        # ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥
        content_ideas = engine.generate_content_ideas(persona_name)
        print("üí° ÎßûÏ∂§ ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥:")
        for i, idea in enumerate(content_ideas[:3], 1):  # ÏÉÅÏúÑ 3Í∞úÎßå
            print(f"   {i}. {idea.title}")
            print(f"      üì± ÌîåÎû´Ìèº: {idea.platform}")
            print(f"      üé£ ÌõÖ: {idea.hook}")
            print(f"      üì¢ CTA: {idea.call_to_action}")
            print()
        
        print("=" * 70)
        print()
    
    # Ï†ÑÏ≤¥ Î¶¨Ìè¨Ìä∏ Ï†ÄÏû•
    report = engine.generate_full_recommendation_report()
    
    with open('persona_recommendations.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ ÌéòÎ•¥ÏÜåÎÇòÎ≥Ñ ÎßûÏ∂§ Ï∂îÏ≤ú Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ± ÏôÑÎ£å!")
    print("üìÅ ÏÉÅÏÑ∏ Î¶¨Ìè¨Ìä∏: persona_recommendations.json")

if __name__ == "__main__":
    main()