'use client'

import { ChevronDown } from 'lucide-react'
import { useState } from 'react'

export interface ReportType {
  id: string
  name: string
  description: string
  icon: string
}

const REPORT_TYPES: ReportType[] = [
  {
    id: 'content_ideas',
    name: 'ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥',
    description: 'Ìä∏Î†åÎî© ÌÜ†ÌîΩ Í∏∞Î∞ò ÏΩòÌÖêÏ∏† ÏïÑÏù¥ÎîîÏñ¥ 5Í∞ú',
    icon: 'üí°'
  },
  {
    id: 'trend_analysis',
    name: 'Ìä∏Î†åÎìú Î∂ÑÏÑù',
    description: 'ÌòÑÏû¨ Ïù∏Í∏∞ ÌÇ§ÏõåÎìúÏôÄ Ìä∏Î†åÎìú ÏÉÅÏÑ∏ Î∂ÑÏÑù',
    icon: 'üìà'
  },
  {
    id: 'monetization',
    name: 'ÏàòÏùµÌôî Ï†ÑÎûµ',
    description: 'ÌéòÎ•¥ÏÜåÎÇòÎ≥Ñ ÎßûÏ∂§ ÏàòÏùµÌôî Î∞©Î≤ïÍ≥º Ï†ÑÎûµ',
    icon: 'üí∞'
  },
  {
    id: 'competitor_analysis',
    name: 'Í≤ΩÏüÅÏûê Î∂ÑÏÑù',
    description: 'ÎπÑÏä∑Ìïú ÌÅ¨Î¶¨ÏóêÏù¥ÌÑ∞Îì§Ïùò ÏÑ±Í≥µ ÏÇ¨Î°Ä Î∂ÑÏÑù',
    icon: 'üîç'
  },
  {
    id: 'content_calendar',
    name: 'ÏΩòÌÖêÏ∏† Ï∫òÎ¶∞Îçî',
    description: 'ÏõîÍ∞Ñ ÏΩòÌÖêÏ∏† Í≥ÑÌöçÍ≥º ÏóÖÎ°úÎìú Ïä§ÏºÄÏ§Ñ',
    icon: 'üìÖ'
  }
]

interface ReportTypeSelectorProps {
  selectedType: ReportType | null
  onSelect: (type: ReportType) => void
}

export function ReportTypeSelector({ selectedType, onSelect }: ReportTypeSelectorProps) {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div className="space-y-2">
      <label className="block text-sm font-medium text-gray-700">
        Î¶¨Ìè¨Ìä∏ Ïú†Ìòï
      </label>
      
      <div className="relative">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="w-full px-4 py-3 text-left bg-white border border-gray-300 rounded-lg shadow-sm hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              {selectedType ? (
                <>
                  <span className="text-lg">{selectedType.icon}</span>
                  <div>
                    <div className="font-medium text-gray-900">{selectedType.name}</div>
                    <div className="text-sm text-gray-500">{selectedType.description}</div>
                  </div>
                </>
              ) : (
                <span className="text-gray-500">Î¶¨Ìè¨Ìä∏ Ïú†ÌòïÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</span>
              )}
            </div>
            <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform ${isOpen ? 'rotate-180' : ''}`} />
          </div>
        </button>

        {isOpen && (
          <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-lg shadow-lg">
            <div className="py-1">
              {REPORT_TYPES.map((type) => (
                <button
                  key={type.id}
                  onClick={() => {
                    onSelect(type)
                    setIsOpen(false)
                  }}
                  className={`w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors ${
                    selectedType?.id === type.id ? 'bg-blue-50 border-l-4 border-blue-500' : ''
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <span className="text-lg">{type.icon}</span>
                    <div>
                      <div className="font-medium text-gray-900">{type.name}</div>
                      <div className="text-sm text-gray-500">{type.description}</div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}